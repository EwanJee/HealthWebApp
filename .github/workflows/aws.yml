name: Deploy to EC2

on:
  push:
    branches: [ "main" ]  # main 브랜치에 푸시될 때 실행

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'  # GitHub Actions 빌드 환경용 JDK 21 설정

      - name: Clean and Build project
        run: |
          cd HealthWebApp
          ./gradlew clean
          ./gradlew clean build

      - name: Upload project files to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "${SSH_PRIVATE_KEY}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          scp -o StrictHostKeyChecking=no -i /tmp/ssh_key -r HealthWebApp ${EC2_USER}@${EC2_HOST}:~/

      - name: Stop and Deploy Docker Containers on EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key ${EC2_USER}@${EC2_HOST} << 'EOF'
            cd ~/HealthWebApp
            docker-compose -f compose.prod.yaml down --remove-orphans --timeout 30 || {
            echo "docker-compose down failed, forcing stop of all containers";
            docker stop $(docker ps -aq) || true  # 강제로 모든 컨테이너 중지
            docker rm $(docker ps -aq) || true    # 중지된 컨테이너 삭제
          }
            ./automation.sh  # 이미지 빌드
            docker-compose -f compose.prod.yaml up -d  # Docker Compose로 새로운 컨테이너 실행
          EOF
